{"ast":null,"code":"var _jsxFileName = \"/Users/frederikgraakjaer/Documents/Multimediedesign/Frontend/fitness tracker/src/pages/UpdatePage.js\",\n    _s = $RefreshSig$();\n\nimport { doc, getDoc, updateDoc, deleteDoc } from \"@firebase/firestore\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport PostForm from \"../components/PostForm\";\nimport { postsRef } from \"../firebase-config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UpdatePage(_ref) {\n  _s();\n\n  let {\n    showLoader\n  } = _ref;\n  const params = useParams(); // url parameter\n\n  const postId = params.id; // get post id from url parameter\n\n  const [post, setPost] = useState({});\n  const navigate = useNavigate();\n  useEffect(() => {\n    async function getPost() {\n      showLoader(true);\n      const docRef = doc(postsRef, postId); // create post ref based on postId from url parameter\n\n      const docData = await getDoc(docRef); // get post data (one specific post)\n\n      setPost(docData.data()); // setting post state with data from firestore\n\n      showLoader(false);\n    }\n\n    getPost();\n  }, [showLoader, postId]); // called every time postId changes\n\n  /**\n   * handleSubmit updates and existing post based on a postId\n   * handleSubmit is called by the PostForm component\n   */\n\n  async function handleSubmit(postToUpdate) {\n    showLoader(true);\n    const docRef = doc(postsRef, postId); // create post ref based on postId\n\n    await updateDoc(docRef, postToUpdate); // update post using the docRef and postToUpdate object (coming from PostForm)\n\n    navigate(\"/\");\n  }\n\n  async function deletePost() {\n    const confirmDelete = window.confirm(`Do you want to delete post, ${post.title}?`); // show confirm delete dialog\n\n    if (confirmDelete) {\n      // if user click \"OK\" then delete post\n      showLoader(true);\n      const docRef = doc(postsRef, postId); // create post ref based on postId\n\n      await deleteDoc(docRef); // delete doc\n\n      navigate(\"/\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Update Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PostForm, {\n      savePost: handleSubmit,\n      post: post\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-outline\",\n      onClick: deletePost,\n      children: \"Delete Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UpdatePage, \"r9GIGS6Ep2Kgn5Cs7wAon3aUljY=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = UpdatePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdatePage\");","map":{"version":3,"sources":["/Users/frederikgraakjaer/Documents/Multimediedesign/Frontend/fitness tracker/src/pages/UpdatePage.js"],"names":["doc","getDoc","updateDoc","deleteDoc","useEffect","useState","useNavigate","useParams","PostForm","postsRef","UpdatePage","showLoader","params","postId","id","post","setPost","navigate","getPost","docRef","docData","data","handleSubmit","postToUpdate","deletePost","confirmDelete","window","confirm","title"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,EAAiCC,SAAjC,QAAkD,qBAAlD;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,kBAAvC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,QAAT,QAAyB,oBAAzB;;AAEA,eAAe,SAASC,UAAT,OAAoC;AAAA;;AAAA,MAAhB;AAAEC,IAAAA;AAAF,GAAgB;AAC/C,QAAMC,MAAM,GAAGL,SAAS,EAAxB,CAD+C,CACnB;;AAC5B,QAAMM,MAAM,GAAGD,MAAM,CAACE,EAAtB,CAF+C,CAErB;;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAMY,QAAQ,GAAGX,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAec,OAAf,GAAyB;AACrBP,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMQ,MAAM,GAAGnB,GAAG,CAACS,QAAD,EAAWI,MAAX,CAAlB,CAFqB,CAEiB;;AACtC,YAAMO,OAAO,GAAG,MAAMnB,MAAM,CAACkB,MAAD,CAA5B,CAHqB,CAGiB;;AACtCH,MAAAA,OAAO,CAACI,OAAO,CAACC,IAAR,EAAD,CAAP,CAJqB,CAII;;AACzBV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AAEDO,IAAAA,OAAO;AACV,GAVQ,EAUN,CAACP,UAAD,EAAaE,MAAb,CAVM,CAAT,CAN+C,CAgBrB;;AAE1B;AACJ;AACA;AACA;;AACI,iBAAeS,YAAf,CAA4BC,YAA5B,EAA0C;AACtCZ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAMQ,MAAM,GAAGnB,GAAG,CAACS,QAAD,EAAWI,MAAX,CAAlB,CAFsC,CAEA;;AACtC,UAAMX,SAAS,CAACiB,MAAD,EAASI,YAAT,CAAf,CAHsC,CAGC;;AACvCN,IAAAA,QAAQ,CAAC,GAAD,CAAR;AACH;;AAED,iBAAeO,UAAf,GAA4B;AACxB,UAAMC,aAAa,GAAGC,MAAM,CAACC,OAAP,CAAgB,+BAA8BZ,IAAI,CAACa,KAAM,GAAzD,CAAtB,CADwB,CAC4D;;AACpF,QAAIH,aAAJ,EAAmB;AACf;AACAd,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMQ,MAAM,GAAGnB,GAAG,CAACS,QAAD,EAAWI,MAAX,CAAlB,CAHe,CAGuB;;AACtC,YAAMV,SAAS,CAACgB,MAAD,CAAf,CAJe,CAIU;;AACzBF,MAAAA,QAAQ,CAAC,GAAD,CAAR;AACH;AACJ;;AAED,sBACI;AAAS,IAAA,SAAS,EAAC,MAAnB;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,QAAD;AAAU,MAAA,QAAQ,EAAEK,YAApB;AAAkC,MAAA,IAAI,EAAEP;AAAxC;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,SAAS,EAAC,aAAlB;AAAgC,MAAA,OAAO,EAAES,UAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GAjDuBd,U;UACLH,S,EAGED,W;;;KAJGI,U","sourcesContent":["import { doc, getDoc, updateDoc, deleteDoc } from \"@firebase/firestore\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport PostForm from \"../components/PostForm\";\nimport { postsRef } from \"../firebase-config\";\n\nexport default function UpdatePage({ showLoader }) {\n    const params = useParams(); // url parameter\n    const postId = params.id; // get post id from url parameter\n    const [post, setPost] = useState({});\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        async function getPost() {\n            showLoader(true);\n            const docRef = doc(postsRef, postId); // create post ref based on postId from url parameter\n            const docData = await getDoc(docRef); // get post data (one specific post)\n            setPost(docData.data()); // setting post state with data from firestore\n            showLoader(false);\n        }\n\n        getPost();\n    }, [showLoader, postId]); // called every time postId changes\n\n    /**\n     * handleSubmit updates and existing post based on a postId\n     * handleSubmit is called by the PostForm component\n     */\n    async function handleSubmit(postToUpdate) {\n        showLoader(true);\n        const docRef = doc(postsRef, postId); // create post ref based on postId\n        await updateDoc(docRef, postToUpdate); // update post using the docRef and postToUpdate object (coming from PostForm)\n        navigate(\"/\");\n    }\n\n    async function deletePost() {\n        const confirmDelete = window.confirm(`Do you want to delete post, ${post.title}?`); // show confirm delete dialog\n        if (confirmDelete) {\n            // if user click \"OK\" then delete post\n            showLoader(true);\n            const docRef = doc(postsRef, postId); // create post ref based on postId\n            await deleteDoc(docRef); // delete doc\n            navigate(\"/\");\n        }\n    }\n\n    return (\n        <section className=\"page\">\n            <h1>Update Page</h1>\n            <PostForm savePost={handleSubmit} post={post} />\n            <button className=\"btn-outline\" onClick={deletePost}>\n                Delete Post\n            </button>\n        </section>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}