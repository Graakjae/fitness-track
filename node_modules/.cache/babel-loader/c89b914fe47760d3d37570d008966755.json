{"ast":null,"code":"var _jsxFileName = \"/Users/frederikgraakjaer/Downloads/react-firestore-post-app-main/src/pages/PostsPage.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { onSnapshot, query, orderBy } from \"firebase/firestore\";\nimport { postsRef } from \"../firebase-config\";\nimport PostCard from \"../components/PostCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HomePage(_ref) {\n  _s();\n\n  let {\n    showLoader\n  } = _ref;\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const q = query(postsRef, orderBy(\"createdAt\", \"desc\")); // order by: lastest post first\n\n    const unsubscribe = onSnapshot(q, data => {\n      const postsData = data.docs.map(doc => {\n        // map through all docs (object) from post collection\n        return { ...doc.data(),\n          id: doc.id\n        }; // changing the data structure so it's all gathered in one object\n      });\n      setPosts(postsData);\n      showLoader(false);\n    });\n    return () => unsubscribe(); // tell the post component to unsubscribe from listen on changes from firestore\n  }, [showLoader]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"page\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"grid-container\",\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n        post: post\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n\n_s(HomePage, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n\n_c = HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["/Users/frederikgraakjaer/Downloads/react-firestore-post-app-main/src/pages/PostsPage.js"],"names":["useState","useEffect","onSnapshot","query","orderBy","postsRef","PostCard","HomePage","showLoader","posts","setPosts","q","unsubscribe","data","postsData","docs","map","doc","id","post"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,OAA5B,QAA2C,oBAA3C;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,eAAe,SAASC,QAAT,OAAkC;AAAA;;AAAA,MAAhB;AAAEC,IAAAA;AAAF,GAAgB;AAC7C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,CAAC,GAAGR,KAAK,CAACE,QAAD,EAAWD,OAAO,CAAC,WAAD,EAAc,MAAd,CAAlB,CAAf,CADY,CAC6C;;AACzD,UAAMQ,WAAW,GAAGV,UAAU,CAACS,CAAD,EAAIE,IAAI,IAAI;AACtC,YAAMC,SAAS,GAAGD,IAAI,CAACE,IAAL,CAAUC,GAAV,CAAcC,GAAG,IAAI;AACnC;AACA,eAAO,EAAE,GAAGA,GAAG,CAACJ,IAAJ,EAAL;AAAiBK,UAAAA,EAAE,EAAED,GAAG,CAACC;AAAzB,SAAP,CAFmC,CAEG;AACzC,OAHiB,CAAlB;AAIAR,MAAAA,QAAQ,CAACI,SAAD,CAAR;AACAN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAP6B,CAA9B;AAQA,WAAO,MAAMI,WAAW,EAAxB,CAVY,CAUgB;AAC/B,GAXQ,EAWN,CAACJ,UAAD,CAXM,CAAT;AAaA,sBACI;AAAS,IAAA,SAAS,EAAC,MAAnB;AAAA,2BACI;AAAS,MAAA,SAAS,EAAC,gBAAnB;AAAA,gBACKC,KAAK,CAACO,GAAN,CAAUG,IAAI,iBACX,QAAC,QAAD;AAAU,QAAA,IAAI,EAAEA;AAAhB,SAA2BA,IAAI,CAACD,EAAhC;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GAzBuBX,Q;;KAAAA,Q","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { onSnapshot, query, orderBy } from \"firebase/firestore\";\nimport { postsRef } from \"../firebase-config\";\nimport PostCard from \"../components/PostCard\";\n\nexport default function HomePage({ showLoader }) {\n    const [posts, setPosts] = useState([]);\n\n    useEffect(() => {\n        const q = query(postsRef, orderBy(\"createdAt\", \"desc\")); // order by: lastest post first\n        const unsubscribe = onSnapshot(q, data => {\n            const postsData = data.docs.map(doc => {\n                // map through all docs (object) from post collection\n                return { ...doc.data(), id: doc.id }; // changing the data structure so it's all gathered in one object\n            });\n            setPosts(postsData);\n            showLoader(false);\n        });\n        return () => unsubscribe(); // tell the post component to unsubscribe from listen on changes from firestore\n    }, [showLoader]);\n\n    return (\n        <section className=\"page\">\n            <section className=\"grid-container\">\n                {posts.map(post => (\n                    <PostCard post={post} key={post.id} />\n                ))}\n            </section>\n        </section>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}