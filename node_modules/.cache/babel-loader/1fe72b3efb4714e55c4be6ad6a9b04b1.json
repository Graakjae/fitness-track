{"ast":null,"code":"var _jsxFileName = \"/Users/frederikgraakjaer/Documents/Multimediedesign/Frontend/fitness tracker/src/components/PostForm.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport imgPlaceholder from \"../assets/img/img-placeholder.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PostForm(_ref) {\n  _s();\n\n  let {\n    savePost,\n    post\n  } = _ref;\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  useEffect(() => {\n    if (post) {\n      // if post, set the states with values from the post object.\n      // The post object is a prop, passed from UpdatePage\n      setTitle(post.title);\n      setBody(post.body);\n      setImage(post.image);\n    }\n  }, [post]); // useEffect is called every time post changes.\n\n  /**\n   * handleImageChange is called every time the user chooses an image in the fire system.\n   * The event is fired by the input file field in the form\n   */\n\n  function handleImageChange(event) {\n    const file = event.target.files[0];\n\n    if (file.size < 500000) {\n      // image file size must be below 0,5MB\n      const reader = new FileReader();\n\n      reader.onload = event => {\n        setImage(event.target.result);\n      };\n\n      reader.readAsDataURL(file);\n      setErrorMessage(\"\"); // reset errorMessage state\n    } else {\n      // if not below 0.5MB display an error message using the errorMessage state\n      setErrorMessage(\"The image file is too big!\");\n    }\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    const formData = {\n      // create a new objebt to hold the value from states / input fields\n      title: title,\n      image: image,\n      body: body\n    };\n    const validForm = formData.title && formData.body && formData.image; // will return false if one of the properties doesn't have a value\n\n    if (validForm) {\n      // if all fields/ properties are filled, then call savePost\n      savePost(formData);\n    } else {\n      // if not, set errorMessage state.\n      setErrorMessage(\"Please, fill in all fields.\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Title\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: title,\n        placeholder: \"Type a title\",\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Body\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: body,\n        placeholder: \"Type a body text\",\n        onChange: e => setBody(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Image\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"file-input\",\n        accept: \"image/*\",\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"image-preview\",\n        src: image,\n        alt: \"Choose\",\n        onError: event => event.target.src = imgPlaceholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-error\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PostForm, \"CaC2ZQDFbZZEgMKedvS+GQPS+ps=\");\n\n_c = PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["/Users/frederikgraakjaer/Documents/Multimediedesign/Frontend/fitness tracker/src/components/PostForm.js"],"names":["useEffect","useState","imgPlaceholder","PostForm","savePost","post","title","setTitle","body","setBody","image","setImage","errorMessage","setErrorMessage","handleImageChange","event","file","target","files","size","reader","FileReader","onload","result","readAsDataURL","handleSubmit","preventDefault","formData","validForm","e","value","src"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport imgPlaceholder from \"../assets/img/img-placeholder.jpg\";\n\nexport default function PostForm({ savePost, post }) {\n    const [title, setTitle] = useState(\"\");\n    const [body, setBody] = useState(\"\");\n    const [image, setImage] = useState(\"\");\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    useEffect(() => {\n        if (post) {\n            // if post, set the states with values from the post object.\n            // The post object is a prop, passed from UpdatePage\n            setTitle(post.title);\n            setBody(post.body);\n            setImage(post.image);\n        }\n    }, [post]); // useEffect is called every time post changes.\n\n    /**\n     * handleImageChange is called every time the user chooses an image in the fire system.\n     * The event is fired by the input file field in the form\n     */\n    function handleImageChange(event) {\n        const file = event.target.files[0];\n        if (file.size < 500000) {\n            // image file size must be below 0,5MB\n            const reader = new FileReader();\n            reader.onload = event => {\n                setImage(event.target.result);\n            };\n            reader.readAsDataURL(file);\n            setErrorMessage(\"\"); // reset errorMessage state\n        } else {\n            // if not below 0.5MB display an error message using the errorMessage state\n            setErrorMessage(\"The image file is too big!\");\n        }\n    }\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        const formData = {\n            // create a new objebt to hold the value from states / input fields\n            title: title,\n            image: image,\n            body: body\n        };\n\n        const validForm = formData.title && formData.body && formData.image; // will return false if one of the properties doesn't have a value\n        if (validForm) {\n            // if all fields/ properties are filled, then call savePost\n            savePost(formData);\n        } else {\n            // if not, set errorMessage state.\n            setErrorMessage(\"Please, fill in all fields.\");\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <label>\n                Title\n                <input type=\"text\" value={title} placeholder=\"Type a title\" onChange={e => setTitle(e.target.value)} />\n            </label>\n            <label>\n                Body\n                <input type=\"text\" value={body} placeholder=\"Type a body text\" onChange={e => setBody(e.target.value)} />\n            </label>\n            <label>\n                Image\n                <input type=\"file\" className=\"file-input\" accept=\"image/*\" onChange={handleImageChange} />\n                <img className=\"image-preview\" src={image} alt=\"Choose\" onError={event => (event.target.src = imgPlaceholder)} />\n            </label>\n            <p className=\"text-error\">{errorMessage}</p>\n            <button type=\"submit\">Save</button>\n        </form>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}