{"ast":null,"code":"var _jsxFileName = \"/Users/frederikgraakjaer/Documents/Multimediedesign/Frontend/fitness tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { Routes, Navigate, Route } from \"react-router-dom\";\nimport Nav from \"./components/Nav\";\nimport PostsPage from \"./pages/PostsPage\";\nimport CreatePage from \"./pages/CreatePage\";\nimport UpdatePage from \"./pages/UpdatePage\";\nimport Loader from \"./components/Loader\";\nimport { useState } from \"react\";\nimport SignInPage from \"./pages/SignInPage\";\nimport SignUpPage from \"./pages/SignUpPage\";\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport ProfilePage from \"./pages/ProfilePage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showLoader, setShowLoader] = useState(true); // default value of the loader is true (loader displayed)\n\n  const [isAuth, setIsAuth] = useState(localStorage.getItem(\"isAuth\")); // default value comes from localStorage\n\n  const auth = getAuth();\n  onAuthStateChanged(auth, user => {\n    if (user) {\n      //user is authenticated / signed in\n      setIsAuth(true); // set isAuth to true\n\n      localStorage.setItem(\"isAuth\", true); // also, save isAuth in localStorage\n    } else {\n      // user is not authenticated / not signed in\n      setIsAuth(false); // set isAuth to false\n\n      localStorage.removeItem(\"isAuth\"); // remove isAuth from localStorage\n    }\n  }); // variable holding all private routes including the nav bar\n\n  const privateRoutes = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(PostsPage, {\n          showLoader: setShowLoader\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/create\",\n        element: /*#__PURE__*/_jsxDEV(CreatePage, {\n          showLoader: setShowLoader\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 48\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/posts/:id\",\n        element: /*#__PURE__*/_jsxDEV(UpdatePage, {\n          showLoader: setShowLoader\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 51\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/profile\",\n        element: /*#__PURE__*/_jsxDEV(ProfilePage, {\n          showLoader: setShowLoader\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        element: /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true); // variable holding all public routes without nav bar\n\n\n  const publicRoutes = /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/sign-in\",\n      element: /*#__PURE__*/_jsxDEV(SignInPage, {\n        showLoader: setShowLoader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 45\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/sign-up\",\n      element: /*#__PURE__*/_jsxDEV(SignUpPage, {\n        showLoader: setShowLoader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 45\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"*\",\n      element: /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/sign-in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this); // if user is authenticated, show privateRoutes, else show publicRoutes\n  // also, display or display not the <Loader/> based on showLoader state\n\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [isAuth ? privateRoutes : publicRoutes, showLoader && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"GgHwc/AMWon7pdAsDR+dsyaCWPM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/frederikgraakjaer/Documents/Multimediedesign/Frontend/fitness tracker/src/App.js"],"names":["Routes","Navigate","Route","Nav","PostsPage","CreatePage","UpdatePage","Loader","useState","SignInPage","SignUpPage","getAuth","onAuthStateChanged","ProfilePage","App","showLoader","setShowLoader","isAuth","setIsAuth","localStorage","getItem","auth","user","setItem","removeItem","privateRoutes","publicRoutes"],"mappings":"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","sourcesContent":["import { Routes, Navigate, Route } from \"react-router-dom\";\nimport Nav from \"./components/Nav\";\nimport PostsPage from \"./pages/PostsPage\";\nimport CreatePage from \"./pages/CreatePage\";\nimport UpdatePage from \"./pages/UpdatePage\";\nimport Loader from \"./components/Loader\";\nimport { useState } from \"react\";\nimport SignInPage from \"./pages/SignInPage\";\nimport SignUpPage from \"./pages/SignUpPage\";\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport ProfilePage from \"./pages/ProfilePage\";\n\nfunction App() {\n    const [showLoader, setShowLoader] = useState(true); // default value of the loader is true (loader displayed)\n    const [isAuth, setIsAuth] = useState(localStorage.getItem(\"isAuth\")); // default value comes from localStorage\n\n    const auth = getAuth();\n\n    onAuthStateChanged(auth, user => {\n        if (user) {\n            //user is authenticated / signed in\n            setIsAuth(true); // set isAuth to true\n            localStorage.setItem(\"isAuth\", true); // also, save isAuth in localStorage\n        } else {\n            // user is not authenticated / not signed in\n            setIsAuth(false); // set isAuth to false\n            localStorage.removeItem(\"isAuth\"); // remove isAuth from localStorage\n        }\n    });\n\n    // variable holding all private routes including the nav bar\n    const privateRoutes = (\n        <>\n            <Nav />\n            <Routes>\n                <Route path=\"/\" element={<PostsPage showLoader={setShowLoader} />} />\n                <Route path=\"/create\" element={<CreatePage showLoader={setShowLoader} />} />\n                <Route path=\"/posts/:id\" element={<UpdatePage showLoader={setShowLoader} />} />\n                <Route path=\"/profile\" element={<ProfilePage showLoader={setShowLoader} />} />\n                <Route path=\"*\" element={<Navigate to=\"/\" />} />\n            </Routes>\n        </>\n    );\n\n    // variable holding all public routes without nav bar\n    const publicRoutes = (\n        <Routes>\n            <Route path=\"/sign-in\" element={<SignInPage showLoader={setShowLoader} />} />\n            <Route path=\"/sign-up\" element={<SignUpPage showLoader={setShowLoader} />} />\n            <Route path=\"*\" element={<Navigate to=\"/sign-in\" />} />\n        </Routes>\n    );\n\n    // if user is authenticated, show privateRoutes, else show publicRoutes\n    // also, display or display not the <Loader/> based on showLoader state\n    return (\n        <main>\n            {isAuth ? privateRoutes : publicRoutes}\n            {showLoader && <Loader />}\n        </main>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}